<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Papers on Meghana Sistla</title>
    <link>https://meghana-sistla.github.io/papers/</link>
    <description>Recent content in Papers on Meghana Sistla</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://meghana-sistla.github.io/papers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weighted Context-Free-Language Ordered Binary Decision Diagrams</title>
      <link>https://meghana-sistla.github.io/papers/wcflobdds/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://meghana-sistla.github.io/papers/wcflobdds/</guid>
      <description>Over the years, many variants of Binary Decision Diagrams (BDDs) have been developed to address the deficiencies of vanilla BDDs. A recent innovation is the Context-Free-Language Ordered BDD (CFLOBDD), a hierarchically structured decision diagram, akin to BDDs enhanced with a procedure-call mechanism, which allows substructures to be shared in ways not possible with BDDs. For some functions, CFLOBDDs are exponentially more succinct than BDDs. Unfortunately, the multi-terminal extension of CFLOBDDs, like multi-terminal BDDs, cannot efficiently represent functions of type B^n -&amp;gt; D, when the function&amp;rsquo;s range has many different values.</description>
    </item>
    
    <item>
      <title>Context-Free-Language Ordered Binary Decision Diagrams</title>
      <link>https://meghana-sistla.github.io/papers/cflobdds/</link>
      <pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://meghana-sistla.github.io/papers/cflobdds/</guid>
      <description>This paper presents a new compressed representation of Boolean functions, called CFLOBDDs (for Context-Free-Language Ordered Binary Decision Diagrams). They are essentially a plug-compatible alternative to BDDs (Binary Decision Diagrams), and hence useful for representing certain classes of functions, matrices, graphs, relations, etc. in a highly compressed fashion. CFLOBDDs share many of the good properties of BDDs, but&amp;ndash;in the best case&amp;ndash;the CFLOBDD for a Boolean function can be exponentially smaller than any BDD for that function.</description>
    </item>
    
    <item>
      <title>Symbolic Quantum Simulation with Quasimodo</title>
      <link>https://meghana-sistla.github.io/papers/quasimodo/</link>
      <pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://meghana-sistla.github.io/papers/quasimodo/</guid>
      <description>The simulation of quantum circuits on classical computers is an important problem in quantum computing. Such simulation requires representations of distributions over very large sets of basis vectors, and recent work has used symbolic data-structures such as Binary Decision Diagrams (BDDs) for this purpose. In this tool paper, we present Quasimodo, an extensible, open-source Python library for symbolic simulation of quantum circuits. Quasimodo is specifically designed for easy extensibility to other backends.</description>
    </item>
    
    <item>
      <title>Graph Coloring using GPUs</title>
      <link>https://meghana-sistla.github.io/papers/europar2019/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://meghana-sistla.github.io/papers/europar2019/</guid>
      <description>Graph coloring is a widely studied problem that is used in a variety of applications, such as task scheduling, register allocation, eigenvalue computations, social network analysis, and so on. Many of the modern day applications deal with large graphs (with millions of vertices and edges) and researchers have exploited the parallelism provided by multi-core systems to efficiently color such large graphs. GPUs provide a promising parallel infrastructure to run large applications.</description>
    </item>
    
  </channel>
</rss>
